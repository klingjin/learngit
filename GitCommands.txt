1.git init
把当前目录变成Git可以管理的仓库。
2.git add <file>
把文件添加到仓库。
3.git commit -m "commit log"
把文件提交到仓库，-m后面输入的是本次提交的说明。
4.git status
查看仓库当前的状态，可以知道有哪些文件被修改。
5.git diff
查看修改的内容。
  git diff HEAD
查看工作区与版本库中最新版本的区别。
6.git log
查看从最近到最远的提交日志。
查看提交历史，以便确定要回退到哪个版本。
  git log --pretty=oneline
以单行日志形式查看。
7.git reset --hard HEAD^
回退到上一个版本。HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，上77个版本可以写成HEAD~77。
  git reset --hard <commit id>
回退到指定版本。
8.git reflog
查看命令历史，以便确定要回到未来的哪个版本。
9.git commit --amend --author='klingjin <klingjin@gmail.com>'
修改已提交的author信息。
10.配置不输入用户名和密码推送到Github
(1)创建ssh key
$ssh-keygen -t rsa -C "klingjin@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/home/king/.ssh/id_rsa): klingjin_rsa
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in klingjin_rsa.
Your public key has been saved in klingjin_rsa.pub.
The key fingerprint is:
a4:1f:c8:7f:69:30:65:17:32:6b:6f:86:64:a9:1f:d0 klingjin@gmail.com
The key's randomart image is:
+--[ RSA 2048]----+
|          o .    |
|         . = .   |
|        o E .    |
|     . + O +     |
|      + S o +    |
|       o = =     |
|        o =      |
|         o       |
|                 |
+-----------------+
执行完后，会生成密钥对文件：私钥klingjin_rsa和公钥klingjin_rsa.pub
（2）添加公钥到github
Settings --> Personal settings --> SSH keys --> Add SSH key
（3）测试连接是否成功
$ ssh -T git@github.com
Hi klingjin! You've successfully authenticated, but GitHub does not provide shell access.
（4）修改.git/config文件中的url
old: url = https://github.com/klingjin/learngit.git
new: url = git@github.com:klingjin/learngit.git
11.git checkout -- filename
用暂存区中filename文件来覆盖工作区中的filename文件。
  git checkout .
撤消工作区的全部修改，即用暂存区的所有文件直接覆盖本地工作区中的文件。
12.git reset HEAD <file>
撤消暂存区的修改，重新放回到工作区。
13.git rm <file>
删除一个文件。
14.git branch
查看分支。
  git branch -a
查看所有分支
  git branch <branch-name>
创建分支。
  git checkout <branch-name>
切换分支。
  git checkout -b <branch-name>
创建并切换分支。
  git merge <branch-name>
合并某分支到当前分支。
  git branch -d <branch-name>
删除分支。
  git branch -D <branch-name>
强制删除分支
  git checkout -b <branch-name> origin/<branch-name>
在本地创建和远程分支对应的分支
  git branch --set-upstream <branch-name> origin/<branch-name>
建立本地分支与远程分支的联系
  git branch -set-upstram origin <branch-name>
将在本地创建的分支推送并关联到远程分支
15.git stash
暂存工作现场
   git stash list
查看暂存的工作现场列表
   git stash pop
恢复最近一次暂存的工作现场，同时删除暂存内容
   git stash apply
恢复最近一次暂存的工作现场，但不删除暂存内容
   git stash drop
删除最近一次暂存的工作现场
16.git push
   推送所有分支代码到远程对应分支上
   git push origin <branch-name>
   仅推送指定本地分支代码到远程对应分支上


